<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>“phaser3&#34; on Sihuayin</title>
    <link>http://sihuayin.github.io/tags/phaser3/</link>
    <description>Recent content in “phaser3&#34; on Sihuayin</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Wed, 17 Jun 2020 21:47:08 +0800</lastBuildDate>
    
	<atom:link href="http://sihuayin.github.io/tags/phaser3/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>使用phaser3开发游戏03</title>
      <link>http://sihuayin.github.io/post/hugo-2020-06-18-01/</link>
      <pubDate>Wed, 17 Jun 2020 21:47:08 +0800</pubDate>
      
      <guid>http://sihuayin.github.io/post/hugo-2020-06-18-01/</guid>
      <description>背景和障碍物 添加背景 使用的背景图片是: 图片下载到资源目录后, 在GameScene.js文件中的preload函数中，预加载图片：
this.load.image(&#39;sky&#39;, &#39;assets/sky.png&#39;);  接着在 create 函数中，给图片添加到场景中
this.add.image(400, 300, &#39;sky&#39;) ...  *** 在create函数开始的时候添加最底层的图片精灵，默认情况下后添加的精灵会在最上层。
跳跃 目前的主角还不能跳跃。我们使用小键盘的 上 来控制主角跳跃:</description>
    </item>
    
    <item>
      <title>使用phaser3开发游戏02</title>
      <link>http://sihuayin.github.io/post/hugo-2020-06-17-02/</link>
      <pubDate>Tue, 16 Jun 2020 21:47:08 +0800</pubDate>
      
      <guid>http://sihuayin.github.io/post/hugo-2020-06-17-02/</guid>
      <description>主角登场 更改场景 用编辑器或者ide打开my_first_game文件夹. 在 src/scenes 目录下面，创建一个新的文件 命名为 GameScene.js
import Phaser from &#39;phaser&#39; export default class GameScene extends Phaser.Scene { constructor () { super(&#39;game-scene&#39;) } preload () { } create () {} update () {} }  删除 src/scenes 目录下的HelloWorldScene.</description>
    </item>
    
    <item>
      <title>使用phaser3开发游戏01</title>
      <link>http://sihuayin.github.io/post/hugo-2020-06-17-01/</link>
      <pubDate>Wed, 09 Oct 2019 21:47:08 +0800</pubDate>
      
      <guid>http://sihuayin.github.io/post/hugo-2020-06-17-01/</guid>
      <description>准备 什么是phaser3? 请移步，到官网查看一下. phaser html5游戏框架
node, nvm , npm 由于node的多版本并存，和比较快的更新版本速度，我们本地环境最好能支持多个版本，能方便切换当前使用版本。那么可以选择安装nvm。
mac：
curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.35.2/install.sh | bash  linux:
wget -qO- https://raw.</description>
    </item>
    
  </channel>
</rss>